ext {
  interlokCoreVersion = project.hasProperty("interlokCoreVersion") ? project.getProperty("interlokCoreVersion") : "3.8-SNAPSHOT"
  releaseVersion = project.hasProperty("releaseVersion") ? project.getProperty("releaseVersion") : "3.8-SNAPSHOT"
  mavenPublishUrl = project.hasProperty("mavenPublishUrl") ? project.getProperty("mavenPublishUrl") : "https://development.adaptris.net/nexus/content/repositories/snapshots"
  repoUsername = project.hasProperty("repoUsername") ? project.getProperty("repoUsername") : "unknown"
  repoPassword = project.hasProperty("repoPassword") ? project.getProperty("repoPassword") : "unknown"
  defaultNexusRepo = project.hasProperty("defaultNexusRepo") ? project.getProperty("defaultNexusRepo") : "https://repo1.maven.org/maven2/"
  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : 'https://development.adaptris.net/javadocs/latest/Interlok-API/'
  interlokCommonJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : 'https://development.adaptris.net/javadocs/latest/Interlok-Common/'
  componentName = "Interlok MQTT"
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://www.adaptris.com"
  slf4jVersion = "1.7.25"
}

// Apply the java plugin to add support for Java
apply plugin: "java"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "eclipse"
apply plugin: "jacoco"

sourceCompatibility = 1.8
group   = "com.adaptris"
version = releaseVersion
def versionDir = "$buildDir/version"

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption("Xdoclint:none", "-quiet")
    }
  }
}

repositories {
  jcenter()
  maven { url "$defaultNexusRepo" }
  maven { url "https://development.adaptris.net/nexus/content/repositories/releases/" }
  maven { url "https://development.adaptris.net/nexus/content/groups/public/" }
  maven { url "https://development.adaptris.net/nexus/content/groups/adaptris-snapshots/" }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
  javadoc {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
  all*.exclude group: 'com.fasterxml.woodstox'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

// In this section you declare the dependencies for your production and test code
dependencies {
  compile ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
  compile ("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}

  compile "org.slf4j:slf4j-api:$slf4jVersion"

  // compileOnly "com.atomikos:transactions-jms:3.8.0"
  compile "javax.transaction:jta:1.1"
  compile "org.apache.httpcomponents:httpclient:4.5.6"
  compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0"

  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
  
  runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
  runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"

  testCompile "junit:junit:4.12"
  testCompile ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true}
  testCompile "log4j:log4j:1.2.17"
  testCompile "org.mockito:mockito-all:1.10.19"
  testCompile "org.apache.activemq:activemq-broker:5.15.6"
  testCompile "org.apache.activemq:activemq-mqtt:5.15.6"

  javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName,
               "Implementation-URL": organizationUrl)
  }
}

javadoc {
  configure(options) {
      links = [
        interlokJavadocs,
        interlokCommonJavadocs,
      ]

    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
  }
}


jacoco {
  toolVersion="0.8.1"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestReport

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = "examples"
  from new File(buildDir, "/examples")
}

artifacts {
  archives javadocJar
  archives examplesJar
}

sourceSets {
  main {
    output.dir(versionDir, builtBy: "generateVersion")
  }
}

  // Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, "META-INF"), "adaptris-version")
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: "component.name", value: componentName)
      entry(key: "build.version", value: releaseVersion)
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
      entry(key: "build.date", value: new Date().format("yyyy-MM-dd"))
    }
  }
}

publishing {
  publications {
    mavenCustom(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", "Connect to a MQTT broker. Consume and produce MQTT messages.")
        // asNode().appendNode("url", "https://development.adaptris.net/docs/Interlok/mqtt-integration.html")
        // asNode().appendNode("logo", "/interlok/img/mqtt.png")
        def properties = asNode().appendNode("properties")
        properties.appendNode("externalUrl", "http://mqtt.org")
        properties.appendNode("notes", "Requires additional jars not automatically delivered")
        properties.appendNode("license", "false")
        properties.appendNode("target", "3.5.0+")
        properties.appendNode("tags", "MQTT")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}
